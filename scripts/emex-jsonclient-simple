#!/usr/bin/env python
#
# Copyright (c) 2023 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.

import sys
import json
import struct
import socket
import pprint


def sock_recv_string(sock):
    len_str = sock.recv(4)

    if not len_str:
        return

    (count,) = struct.unpack('!I', len_str)

    if not count:
        return

    byte_str = struct.unpack('%ds' % count, sock.recv(count, socket.MSG_WAITALL))[0]

    pprint.pprint(json.loads(byte_str))



if not len(sys.argv) == 2:
    print('usage: emex-jsonclient-simple EMEX_JSONSERVER_ACCESSOR')
    print()
    print('description: connect to an EMOE emex-jsonserver accessor')
    print('             and print stats to stdout')
    print()
    print('example:     emex-jsonclient-simple 127.0.0.1:9001')
    print()
    exit(1)

addr,port = sys.argv[1].split(':')

endpoint = (addr,int(port))

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

s.connect(endpoint)

try:
    while True:
        sock_recv_string(s)

except KeyboardInterrupt:
    pass
except ConnectionRefusedError as e:
    print('Connection refused')
except Exception as e:
    print(e)

finally:
    s.close()
