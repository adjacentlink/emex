#!/usr/bin/env python
#
# Copyright (c) 2023 - Adjacent Link LLC, Bridgewater, New Jersey
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
# * Redistributions of source code must retain the above copyright
#   notice, this list of conditions and the following disclaimer.
# * Redistributions in binary form must reproduce the above copyright
#   notice, this list of conditions and the following disclaimer in
#   the documentation and/or other materials provided with the
#   distribution.
# * Neither the name of Adjacent Link LLC nor the names of its
#   contributors may be used to endorse or promote products derived
#   from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# See toplevel COPYING for more information.

import argparse
import logging
import os
import sys

from emex.emoeerror import EmoeError

if __name__ == '__main__':
    from emex.batch_parser import add_batch_parser
    from emex.run_parser import add_run_parser
    from emex.shell_parser import add_shell_parser


    parser = argparse.ArgumentParser(description='EMEXD Client',
                                     formatter_class=argparse.RawDescriptionHelpFormatter)

    parser.add_argument('--log-file',
                        type=str,
                        metavar='FILE',
                        default=None,
                        help='Log file to write to, stdout if not specified.')
    parser.add_argument('--log-level',
                        type=str,
                        metavar='LEVEL',
                        choices=['critical',
                                 'error',
                                 'warning',
                                 'info',
                                 'debug',
                                 'notset'],
                        default='info',
                        help='log level [default: %(default)s].')

    subparsers = parser.add_subparsers(dest='selected_subparser')

    add_batch_parser(subparsers)
    add_run_parser(subparsers)
    add_shell_parser(subparsers)

    args = parser.parse_args()

    numeric_level = getattr(logging,args.log_level.upper(), None)

    log_stream = open(args.log_file, 'w+') if args.log_file else sys.stdout

    logging.basicConfig(stream=log_stream,
                        format='%(asctime)s.%(msecs)03d %(levelname)s: %(message)s',
                        datefmt='%H:%M:%S',
                        level=numeric_level)

    if not args.selected_subparser:
        parser.print_help()
        exit(1)
    try:
        args.func(args)
    except NameError as ne:
        print('\n' + str(ne) + '\n', file=sys.stderr)
        exit(1)
    except EmoeError as ee:
        logging.error(ee)
